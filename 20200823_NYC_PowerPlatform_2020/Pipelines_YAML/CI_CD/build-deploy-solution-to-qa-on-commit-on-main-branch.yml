#NYCPowerPlatform2020
# Pipeline automatically triggered when their is a commit in the 'UnmanagedSolutionsUnpacked' folder of the main branch to deploy the customizations to the QA environment
# No input variables

trigger:
  branches:
    include:
    - main
  paths:
    include:
    - UnmanagedSolutionsUnpacked/*
    exclude:
    - README.md
    - Pipelines/*

# Alternative trigger proposition for this pipeline
#schedules:
#- cron: "0 2 * * *"
#  displayName: Daily 2am build deployment QA
#  branches:
#    include:
#    - main
#  paths:
#    include:
#    - UnmanagedSolutionsUnpacked/*
#    exclude:
#    - README.md
#    - Pipelines/*

variables:
- name: SolutionName
  value: NationalParksManagement

stages:
# Stage for the build of an unmanaged solution from the files in the main branch
- stage: 'PackSolution'
  displayName: 'Pack Solution'
  jobs:
    - job: 'PackSolution'
      displayName: 'PackSolution job'
      pool:
        name: Azure Pipelines
        vmImage: 'windows-2019'

      steps:
      # Call to the pipeline template with the steps to pack an unmanaged solution
      - template: ../PipelineTemplates/pack-unmanaged-solution-template.yml

# Stage for the build of a managed version of the considered solution on the build environment
# This stage runs only if 'PackSolution' stage is succeeded
- stage: 'BuildManagedSolution'
  displayName: 'Generate a managed solution based on an unmanaged solution packed at previous stage'
  dependsOn: PackSolution
  condition: succeeded()
  jobs:
    - deployment: 'BuildManagedSolution'
      pool:
        name: Azure Pipelines
        vmImage: 'windows-2019'
      environment: 'Build'

      strategy:
        runOnce:
          deploy:
            steps:
            # Call to the pipeline template with the steps to generate a manage solution from an unmanaged solution
            - template: ../PipelineTemplates/generate-managed-solution-template.yml

# Stage for the deployment of the managed version of the considered solution to QA environment
# This stage runs only if 'BuildManagedSolution' stage is succeeded
- stage: 'ImportSolutionToQA'
  displayName: 'Import managed solution to QA environment'
  dependsOn: BuildManagedSolution
  condition: succeeded()
  jobs:
    - deployment: 'ImportSolutionToQA'
      pool:
        name: Azure Pipelines
        vmImage: 'windows-2019'
      environment: 'QA'

      strategy:
        runOnce:
          deploy:
            steps:
              # Call to the pipeline template with the steps to deploy a managed solution to a specified environment
              - template: ../PipelineTemplates/deploy-managed-solution-template.yml
                parameters:
                  targetedEnvironment: 'QA'

# Fake stage to simulate integration tests if 'ImportSolutionToQA' stage succeeded
- stage: 'IntegrationTests'
  displayName: 'Run Integration tests'
  dependsOn: ImportSolutionToQA
  condition: succeeded()
  jobs:
    - job: 'IntegrationTests'
      displayName: 'IntegrationTests job'
      pool:
        name: Azure Pipelines
        vmImage: 'windows-2019'

      steps:
        - script: echo Integration tests
          displayName: 'Integration tests'