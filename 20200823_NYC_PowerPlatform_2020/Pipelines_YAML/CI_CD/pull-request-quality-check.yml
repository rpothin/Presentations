#NYCPowerPlatform2020
# Quality check of a work branch before merge with the main branch in the context of a pull request
# No input variables

trigger: none # Pipeline triggered manually, but in reality it is defined as build validation pipeline for the main branch and automatically triggered in the context of a pull request to the main branch

# Get the full name of the targeted branch, extracted from 'Build.SourceBranch' or 'System.PullRequest.SourceBranch' predefined variables
variables:
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/') }}:
    branchName: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/pull/') }}:
    branchName: $[ replace(variables['System.PullRequest.SourceBranch'], 'refs/heads/', '') ]

stages:
# Stage for:
# - stopping the pipeline if it is an update on pipeline definitions in the repo
# - verify that we are able to extract a Solution Name from the Source Branch full name (in 2nd position - ex: Features/NationalParksManagement/US_2)
- stage: 'Initialization'
  displayName: 'Initialize pipeline'
  condition: and(succeeded(), not(startsWith(variables['branchName'], 'Pipeline')))
  jobs:
    - job: 'Initialization'
      displayName: 'Initialization job'
      pool:
        name: Azure Pipelines
        vmImage: 'windows-2019'

      steps:
      # Powershell task to extract the solution name from the branch full name (in 2nd position - ex: Features/NationalParksManagement/US_2) and push it to a variable
      - powershell: |
          $BRANCH_NAME = "$(branchName)"
          $BRANCH_NAME -split "/"

          $SOLUTION_NAME = ($BRANCH_NAME -split "/")[1]

          echo "##vso[task.setvariable variable=SolutionName;isOutput=true]$SOLUTION_NAME"
        name: setvarStep

      - script: |
          echo Branch Name: $(branchName)
          echo Solution Name: $(setvarStep.SolutionName)
        name: echoVar

# Fake stage to simulate a code check (for quality, security...) executed in parallel of the 'CodeUnitTests' stage if 'Initialization' stage succeeded
- stage: 'CodeCheck'
  displayName: 'Check the quality of the code'
  dependsOn: Initialization
  condition: succeeded()
  jobs:
    - job: 'CodeCheck'
      displayName: 'CodeCheck job'
      pool:
        name: Azure Pipelines
        vmImage: 'windows-2019'

      steps:
      - script: echo Code checks
        displayName: 'Code checks'

# Fake stage to simulate unit tests on the code executed in parallel of the 'CodeCheck' stage if 'Initialization' stage succeeded
- stage: 'CodeUnitTests'
  displayName: 'Run unit tests on the code'
  dependsOn: Initialization
  condition: succeeded()
  jobs:
    - job: 'CodeUnitTests'
      displayName: 'CodeUnitTests job'
      pool:
        name: Azure Pipelines
        vmImage: 'windows-2019'

      steps:
      - script: 
          echo Code unit tests
        displayName: 'Code unit tests'

# Stage for:
# - the build an unmanaged solution from the files in the pull request source branch
# - the execution of the solution checker on the pack unmanaged solution
# This stage runs only if 'CodeCheck' and 'CodeUnitTests' stages are succeeded
- stage: 'SolutionCheck'
  displayName: 'Power Platform Solution Check'
  dependsOn:
  - CodeCheck
  - CodeUnitTests
  condition: succeeded()
  jobs:
    - job: 'SolutionCheck'
      displayName: 'SolutionCheck job'
      pool:
        name: Azure Pipelines
        vmImage: 'windows-2019'

      steps:
      # Powershell task to extract the solution name from the branch full name (in 2nd position - ex: Features/NationalParksManagement/US_2) and push it to a variable
      - powershell: |
          $BRANCH_NAME = "$(branchName)"

          $SOLUTION_NAME = ($BRANCH_NAME -split "/")[1]

          echo "##vso[task.setvariable variable=SolutionName;isOutput=true]$SOLUTION_NAME"
        name: setvarStepForSolutionCheck

      # Install the Power Platform Build Tools
      - task: PowerPlatformToolInstaller@0
        inputs:
          DefaultVersion: true
      
      # Build an unmanaged solution from the files in the pull request source branch
      - task: PowerPlatformPackSolution@0
        inputs:
          SolutionSourceFolder: '$(Build.SourcesDirectory)\UnmanagedSolutionsUnpacked\$(setvarStepForSolutionCheck.SolutionName)'
          SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\$(setvarStepForSolutionCheck.SolutionName).zip'

      # Execute the Solution Checker on the pack unmanaged solution we got in the previous task 
      - task: PowerPlatformChecker@0
        inputs:
          PowerPlatformSPN: 'Power Apps Checker Client'
          FilesToAnalyze: '$(Build.ArtifactStagingDirectory)\$(setvarStepForSolutionCheck.SolutionName).zip'
          RuleSet: '0ad12346-e108-40b8-a956-9a8f95ea18c9'

      # Publish the unmanaged solution we got in a previous task as an artifcat so we can use it in a next stage
      - publish: '$(Build.ArtifactStagingDirectory)\$(setvarStepForSolutionCheck.SolutionName).zip'
        displayName: 'Publish unmanaged solution for later use in the pipeline'
        artifact: dropUnmanagedSolution

# Stage for the build of a managed version of the considered solution on the build environment
# This stage runs only if 'SolutionCheck' stage is succeeded
- stage: 'BuildManagedSolution'
  displayName: 'Generate a managed solution from the unpacked solution exported in the previous stage'
  dependsOn: SolutionCheck
  condition: succeeded()
  jobs:
    - deployment: 'BuildManagedSolution'
      pool:
        name: Azure Pipelines
        vmImage: 'windows-2019'

      environment: 'Build'

      strategy:
        runOnce:
          deploy:
            steps:
              # Get artifacts built in the previous stage with the unmanaged solution
              - download: current
                artifact: dropUnmanagedSolution

              # Powershell task to extract the solution name from the branch full name (in 2nd position - ex: Features/NationalParksManagement/US_2) and push it to a variable  
              - powershell: |
                  $BRANCH_NAME = "$(branchName)"

                  $SOLUTION_NAME = ($BRANCH_NAME -split "/")[1]

                  echo "##vso[task.setvariable variable=SolutionName;isOutput=true]$SOLUTION_NAME"
                name: setvarStepForBuildManagedSolution

              # Install the Power Platform Build Tools
              - task: PowerPlatformToolInstaller@0
                inputs:
                  DefaultVersion: true

              # Import the unmanaged solution to the build environment
              - task: PowerPlatformImportSolution@0
                inputs:
                  authenticationType: 'PowerPlatformSPN'
                  PowerPlatformSPN: 'Build'
                  SolutionInputFile: '$(Pipeline.Workspace)\dropUnmanagedSolution\$(setvarStepForBuildManagedSolution.SolutionName).zip'
                  AsyncOperation: true
                  MaxAsyncWaitTime: '240'

              # Publish all customizations on the targeted dev environment
              - task: PowerPlatformPublishCustomizations@0
                inputs:
                  authenticationType: 'PowerPlatformSPN'
                  PowerPlatformSPN: 'Build'  

              # Export the considered solution as managed
              - task: PowerPlatformExportSolution@0
                inputs:
                  authenticationType: 'PowerPlatformSPN'
                  PowerPlatformSPN: 'Build'
                  SolutionName: '$(setvarStepForBuildManagedSolution.SolutionName)'
                  SolutionOutputFile: '$(Build.ArtifactStagingDirectory)\$(setvarStepForBuildManagedSolution.SolutionName)_managed.zip'
                  Managed: true

              # Publish the managed solution we got in a previous task as an artifcat so we can use it in a next stage
              - publish: '$(Build.ArtifactStagingDirectory)\$(setvarStepForBuildManagedSolution.SolutionName)_managed.zip'
                displayName: 'Publish managed solution for later use in the pipeline'
                artifact: dropManagedSolution

# Stage for the deployment of the managed version of the considered solution to the environment for the test of the content of a single work branch
# This stage runs only if 'BuildManagedSolution' stage is succeeded
- stage: 'ImportSolutionForFeatureTest'
  displayName: 'Import managed solution for feature test'
  dependsOn: BuildManagedSolution
  condition: succeeded()
  jobs:
    - deployment: 'DeploymentToFeatureTest'
      pool:
        name: Azure Pipelines
        vmImage: 'windows-2019'

      environment: 'Feature Test'

      strategy:
        runOnce:
          deploy:
            steps:
              # Get artifacts built in the previous stage with the managed solution
              - download: current
                artifact: dropManagedSolution
              
              # Powershell task to extract the solution name from the branch full name (in 2nd position - ex: Features/NationalParksManagement/US_2) and push it to a variable
              - powershell: |
                  $BRANCH_NAME = "$(branchName)"

                  $SOLUTION_NAME = ($BRANCH_NAME -split "/")[1]

                  echo "##vso[task.setvariable variable=SolutionName;isOutput=true]$SOLUTION_NAME"
                name: setvarStepForDeploymentToFeatureTest

              # Install the Power Platform Build Tools
              - task: PowerPlatformToolInstaller@0
                inputs:
                  DefaultVersion: true

              # Import the unmanaged solution to the environment for the test of the content of a single work branch
              - task: PowerPlatformImportSolution@0
                inputs:
                  authenticationType: 'PowerPlatformSPN'
                  PowerPlatformSPN: 'Feature Test'
                  SolutionInputFile: '$(Pipeline.Workspace)/dropManagedSolution/$(setvarStepForDeploymentToFeatureTest.SolutionName)_managed.zip'
                  AsyncOperation: true
                  MaxAsyncWaitTime: '240'

# Fake stage to simulate UI unit tests if 'ImportSolutionForFeatureTest' stage succeeded
- stage: 'UIUnitTests'
  displayName: 'Run UI unit tests'
  dependsOn: ImportSolutionForFeatureTest
  condition: succeeded()
  jobs:
    - job: 'UIUnitTests'
      displayName: 'UIUnitTests job'
      pool:
        name: Azure Pipelines
        vmImage: 'windows-2019'

      steps:
        - script: echo UI unit tests
          displayName: 'UI unit tests'